TO DO:

Gör så att pos printas när man klickar?
Gör så att bossen skapas först när man dödat alla fiender
Effektivisera skapandet av nivåer?

annan skit:

for enemies in range 20:
    enemies.rect.x osv...



Allting ligger i all_sprites_list, och score räknas direkt när fiender dör. <-  Går inte tror jag

Två olika objekt i en spritegrupp och ifall de använder rätt update
Göra en spritegroup i en spritegroup?
Inte skapa allting i init, all_sprites innehåller bara det som används nu, och finns bara en lista

HP bar

En lista där det ligger en lista med alla saker, sen andra elementet i första listan är
vad den ska följa efter och tredje är hur snabbt.
Göra en till klass som är barn till grupp och ändra den så att jag kan ha choose target o sånt?

Problem:
Score från fiender läggs till flera gånger om ifall du skjuter snabbt nog



A:
Gör en utförlig planering och lämna in till läraren
Fixa stjärnornas latemanslösning
Integrera Meny i game p� n�got snyggt s�tt, som lvl -1
Lägg till projektillistor för bossens skott, gör att de skadar spelaren o skjuts automatiskt
Olika klasser för varje nivå? Som alla är barn till en game-klass men har olika inits? Kanske?

B:
Powerups som gör att man skjuter mer saker / får missiler
Fixa boss 2 så att den också skjuter och resetas normalt
Astereoider?
Spara in highscore i gameklassen efter att det har blivit game over
Skott ska skjutas ifrån mitten av figuren istället för kanten?

C:
Menyikonen ska vara spelarskeppet
Gör om allting till trianglar? Snyggare så imo
Ställerna där det är repeterad kod går att effektivisera.
    Gör en generell formel i form av klass/funktion som kan fixa mobs?
Ha planeter i bakrunden?
Kanske astereoider? Kanske fixa bakrund?



Groupcollide:

            #### Groupcollide is a bit weird, doesnt really work here.
            #  groupcollide(group1, group2, dokill1, dokill2) -> dictionary
#
            #self.projectile_hit_list = pygame.sprite.groupcollide(self.projectile_list, self.enemy_list, True, True)
            #self.projectile_boss_hit_list = pygame.sprite.groupcollide(self.projectile_list, self.boss_list, True, False)
#
            #for self.player_projectile in self.projectile_list:
#
            #    for enemy in self.projectile_hit_list:
            #        self.score += 1
            #        print(self.score)
#
            #    for boss in self.projectile_boss_hit_list:
#
            #        if self.level == 1:
            #            self.boss1.hp -= self.player_projectile.damage
            #            print(self.boss1.hp)
#
            #        if self.level == 2:
            #            self.boss2.hp -= self.player_projectile.damage
            #            print(self.boss2.hp)
#
            #    if self.player_projectile.rect.y <= 0 or self.player_projectile.rect.y > SCREEN_HEIGHT:
            #        self.projectile_list.remove(self.player_projectile)
            #        self.all_sprites_list.remove(self.player_projectile)

#############################################################################################

Alternativ skjutsak:

for x in range(2):
    self.player_projectile = sprites.Projectile()
    self.player_projectile.rect.x = self.player.rect.x + self.player.image.get_width() // 2\
                                    - self.player_projectile.image.get_width() // 2 + -1^(x)\
                                    * self.player.image.get_width() // (x+1)
    #x * self.player.image.get_width() + -1^(x+1)*self.player_projectile.image.get_width()
    self.player_projectile.rect.y = self.player.rect.y
    self.all_sprites_list.add(self.player_projectile)
    self.projectile_list.add(self.player_projectile)

#############################################################################################